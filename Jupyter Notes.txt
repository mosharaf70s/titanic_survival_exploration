

# Import libraries necessary for this project
import numpy as np
import pandas as pd
from IPython.display import display # Allows the use of display() for DataFrames
import mistune
import os
import sys
import matplotlib.pyplot as plt

# Pretty display for notebooks
%matplotlib inline

tar = os.chdir(r"C:\Users\mosha\OneDrive\Machine Learning\") # do not mention file name here
save_path = os.getcwd()# to print the path name in CLI
print(save_path)

# Load the dataset
in_file = 'titanic_data.csv'
full_data = pd.read_csv(in_file)  #input file
=================================
full_data.dtypes  #Return the dtypes in this object

full_data.shape #row and columns

# Print the first few entries of the RMS Titanic data
#display(full_data.head())

full_data.size
full_data.index

full_data.columns #Print the name of all the columns.
full_data.info()
#create new df with sorted results
full_data.head(5)

# Select bottom N number of records (default = 5)
full_data.tail()

# Select top N number of records (default = 5)
df.head()
=================================

print('Python version ' + sys.version)
print('Pandas version: ' + pd.__version__)
print('Matplotlib version ' + matplotlib.__version__)

=================================
#df= pd.read_csv(in_file)  #input file
df = pd.DataFrame(data=dataset, columns=['State','Status','CustomerCount','StatusDate'])
df.info()

# Save results to excel
df.to_excel('Lesson3.xlsx', index=False)
print('Done')
=================================


# Location of file
Location = r'C:\Users\david\notebooks\update\Lesson3.xlsx'

# Parse a specific sheet
df = pd.read_excel(Location, 0, index_col='StatusDate')
df.dtypes
=================================

# Our small data set
d = [0,1,2,3,4,5,6,7,8,9]

# Create dataframe
df = pd.DataFrame(d)
df
# Lets change the name of the column
df.columns = ['Rev']
df
# Lets add a column
df['NewCol'] = 5
df
# Lets modify our new column
df['NewCol'] = df['NewCol'] + 1
df
# We can delete columns
del df['NewCol']
df
# Lets add a couple of columns
df['test'] = 3
df['col'] = df['Rev']
df
# If we wanted, we could change the name of the index
i = ['a','b','c','d','e','f','g','h','i','j']
df.index = i
df
df.loc['a']

# df.loc[inclusive:inclusive]
df.loc['a':'d']

=================================
Export to CSV
In [10]:
df.to_csv('DimDate.csv', index=False)
print('Done')
Done
Export to EXCEL
In [11]:
df.to_excel('DimDate.xls', index=False)
print('Done')
Done
Export to TXT
In [12]:
df.to_csv('DimDate.txt', index=False)
print('Done')

df.tail()


=================================
From Excel to DataFrame

# Path to excel file
# Your path will be different, please modify the path below.
location = r'C:\Users\david\notebooks\update\Lesson10.xlsx'

# Parse the excel file
df = pd.read_excel(location, 0)
df.head()


=================================
From JSON to DataFrame
In [9]:
# Your path will be different, please modify the path below.
jsonloc = r'C:\Users\david\notebooks\update\Lesson10.json'

# read json file
df2 = pd.read_json(jsonloc)

From DataFrame to JSON
In [8]:
df.to_json('Lesson10.json')
print('Done')
=================================
Place all three Excel files into a DataFrame

# List to hold file names
FileNames = []

# Your path will be different, please modify the path below.
os.chdir(r"C:\Users\david\notebooks\update")

# Find any file that ends with ".xlsx"
for files in os.listdir("."):
    if files.endswith(".xlsx"):
        FileNames.append(files)
        
FileNames

def GetFile(fnombre):

    # Path to excel file
    # Your path will be different, please modify the path below.
    location = r'C:\Users\david\notebooks\update\\' + fnombre
    
    # Parse the excel file
    # 0 = first sheet
    df = pd.read_excel(location, 0)
    
    # Tag record to file name
    df['File'] = fnombre
    
    # Make the "File" column the index of the df
    return df.set_index(['File'])

# Create a list of dataframes
df_list = [GetFile(fname) for fname in FileNames]
df_list

# Combine all of the dataframes into one
big_df = pd.concat(df_list)
big_df

big_df.dtypes

# Plot it!
big_df['Channel'].plot.bar();

What is the median name occurrence?
names[names.Count == names.Count.median()]

Get a summary with the mean, min, max, std and quartiles.
names.describe()

What is the standard deviation of names?
names.Count.std()
=================================

How many orders were made in the period?
df.order_id.value_counts().count()

https://pandas.pydata.org/pandas-docs/stable/tutorials.html

=================================